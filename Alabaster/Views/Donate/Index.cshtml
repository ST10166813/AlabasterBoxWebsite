@{
    ViewData["Title"] = "Donate";
}

@section Styles {
    <style>
        /* RESET */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        html, body {
            font-family: 'Poppins', 'Segoe UI', sans-serif;
            background: url('../images/cross7.png') center -10% / cover no-repeat fixed;
            background-color: #000;
            color: #fff;
            min-height: 100vh;
            overflow-x: hidden;
        }

        a {
            text-decoration: none;
            color: inherit;
        }

        /* CINEMATIC OVERLAY */
        body::before {
            content: "";
            position: fixed;
            inset: 0;
            background: rgba(0, 0, 0, 0.35);
            z-index: 0;
        }

        /* PAGE LAYOUT */
        .donate-hero {
            position: relative;
            background: url('../images/Donate.jpg') center center / cover no-repeat;
            width: 100%;
            min-height: 320px;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            margin-bottom: 2.8rem;
            z-index: 1;
        }

        .donate-hero::after {
            content: "";
            position: absolute;
            inset: 0;
            background: rgba(0,0,0,0.45);
            z-index: 1;
            border-bottom: 1px solid rgba(255,215,0,0.06);
        }

        .donate-hero .hero-content {
            position: relative;
            z-index: 2;
            padding: 2.2rem 1rem;
            color: #fff;
        }

        .donate-hero h1 {
            font-size: 3rem;
            font-weight: 900;
            margin-bottom: 0.5rem;
            background: linear-gradient(90deg, #FFD700, #fff, #FFD700);
            background-size: 200% auto;
            color: transparent;
            -webkit-background-clip: text;
            background-clip: text;
            text-shadow: 0 0 18px rgba(255,215,0,0.25);
            animation: shimmer 6s linear infinite;
        }

        .donate-hero p {
            font-size: 1.05rem;
            color: #f4f4f4;
            max-width: 900px;
            margin: 0.6rem auto 1rem auto;
            text-shadow: 0 1.6px 4.8px rgba(0,0,0,0.55);
            line-height: 1.6;
        }

        .donate-hero .hero-cta {
            display: inline-block;
            margin-top: 0.9rem;
            padding: 0.9rem 1.8rem;
            font-size: 1rem;
            color: #000;
            background: linear-gradient(135deg, #FFD700, #FFAA00);
            border-radius: 999px;
            font-weight: 800;
            box-shadow: 0 10px 28px rgba(255, 170, 0, 0.25);
        }

        @@keyframes shimmer {
            0% { background-position: 0% 50%; }
            100% { background-position: 200% 50%; }
        }

        /* MAIN CARD */
        .donate-section {
            display: flex;
            justify-content: center;
            padding: 2.6rem 1.2rem 4rem 1.2rem;
            z-index: 1;
            position: relative;
        }

        .donate-card {
            width: 100%;
            max-width: 1100px;
            display: grid;
            grid-template-columns: 1fr 420px;
            gap: 2rem;
            background: rgba(0,0,0,0.55);
            border-radius: 1.35rem;
            padding: 2.4rem;
            border: 1px solid rgba(255,215,0,0.12);
            backdrop-filter: blur(18px) saturate(160%);
            box-shadow: 0 26px 60px rgba(0,0,0,0.55);
            opacity: 0;
            transform: translateY(26px);
            transition: all 1s ease;
        }

        .donate-card.visible {
            opacity: 1;
            transform: translateY(0);
        }

        /* LEFT CONTENT */
        .donate-content h2 {
            font-size: 2.1rem;
            font-weight: 900;
            margin-bottom: 0.9rem;
            color: #fff;
            text-shadow: 0 3px 10px rgba(0,0,0,0.6);
        }

        .donate-content p {
            font-size: 1.05rem;
            color: #f1f1f1;
            line-height: 1.75;
            margin-bottom: 1rem;
        }

        .donate-image {
            width: 100%;
            border-radius: 1rem;
            object-fit: cover;
            display: block;
            margin: 1.15rem 0 0.75rem 0;
            box-shadow: 0 12px 36px rgba(0,0,0,0.45);
        }

        .donate-note {
            font-size: 0.98rem;
            color: #fff;
            background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
            padding: 0.9rem;
            border-radius: 0.8rem;
            border: 1px solid rgba(255,215,0,0.06);
            box-shadow: 0 8px 20px rgba(0,0,0,0.35);
        }

        /* RIGHT: DONATION OPTIONS */
        .donate-options {
            display: flex;
            flex-direction: column;
            gap: 1.35rem;
        }

        .option-card {
            background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
            border-radius: 1rem;
            padding: 1.25rem;
            border: 1px solid rgba(255,215,0,0.08);
            box-shadow: 0 12px 30px rgba(0,0,0,0.45);
        }

        .option-card h3 {
            font-size: 1.25rem;
            font-weight: 800;
            margin-bottom: 0.6rem;
            color: #FFD700;
        }

        .option-card p {
            font-size: 0.98rem;
            color: #eee;
            line-height: 1.6;
            margin-bottom: 0.7rem;
        }

        /* BANK DETAILS */
        .bank-details {
            background: rgba(0,0,0,0.35);
            border-radius: 0.75rem;
            padding: 0.9rem;
            color: #fff;
            border: 1px dashed rgba(255,215,0,0.12);
        }

        .bank-line {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 0.8rem;
            margin-bottom: 0.5rem;
            font-size: 0.98rem;
        }

        .bank-line strong {
            color: #ffd;
            font-weight: 700;
        }

        .copy-btn {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 6px 10px;
            font-size: 0.9rem;
            border-radius: 999px;
            background: rgba(255,215,0,0.95);
            color: #000;
            border: none;
            cursor: pointer;
            font-weight: 700;
            box-shadow: 0 8px 20px rgba(255,215,0,0.12);
        }

        .small-muted {
            font-size: 0.85rem;
            color: #ddd;
            opacity: 0.9;
        }

        .address-block {
            background: rgba(0,0,0,0.35);
            border-radius: 0.75rem;
            padding: 0.9rem;
            color: #fff;
            border: 1px dashed rgba(255,215,0,0.08);
            font-size: 0.98rem;
            line-height: 1.5;
        }

        .btn-secondary {
            display: inline-block;
            margin-top: 0.6rem;
            padding: 10px 16px;
            border-radius: 999px;
            background: linear-gradient(135deg, rgba(255,215,0,0.08), rgba(255,215,0,0.12));
            color: #FFD700;
            border: 1px solid rgba(255,215,0,0.12);
            font-weight: 800;
            text-decoration: none;
            font-size: 0.95rem;
        }

        .donation-footer {
            margin-top: 1rem;
            font-size: 0.92rem;
            color: #ddd;
        }

        @@media (max-width: 992px) {
            .donate-card {
                grid-template-columns: 1fr;
                text-align: left;
                padding: 1.6rem;
            }

            .donate-hero h1 {
                font-size: 2.4rem;
            }

            .donate-hero p {
                font-size: 1rem;
            }

            .donate-card {
                gap: 1rem;
            }
        }

        @@media (max-width: 768px) {
            .donate-hero h1 {
                font-size: 2rem;
            }

            .donate-content h2 {
                font-size: 1.6rem;
            }

            .bank-line {
                font-size: 0.92rem;
            }

            .copy-btn {
                padding: 6px 8px;
                font-size: 0.85rem;
            }
        }

        /* ---------------- Payment panel  --------------*/
        .pf-panel {
            background: linear-gradient(180deg, rgba(10,10,10,0.95), rgba(6,6,6,0.9));
            color: #fff;
            border-radius: 12px;
            padding: 18px;
            box-shadow: 0 12px 40px rgba(0,0,0,0.6);
            border: 1px solid rgba(255,215,0,0.08);
        }

        .pf-field {
            margin-bottom: 12px;
        }

        .pf-label {
            font-size: 13px;
            color: rgba(255, 215, 0, 0.9);
            margin-bottom: 6px;
            display: block;
            font-weight: 700;
            letter-spacing: 0.2px;
        }

        .pf-input, .pf-select, .pf-btn-inline {
            padding: 12px 14px;
            border-radius: 8px;
            border: 1px solid rgba(255,215,0,0.06);
            background: rgba(255,255,255,0.03);
            font-size: 15px;
            color: #fff;
            width: 100%;
            outline: none;
            transition: box-shadow .18s ease, border-color .18s ease, transform .06s ease;
        }

        .pf-input::placeholder {
            color: rgba(255,255,255,0.45);
        }

        .pf-input:focus, .pf-select:focus {
            box-shadow: 0 6px 28px rgba(255, 183, 26, 0.09), 0 0 0 4px rgba(255,215,0,0.06);
            border-color: rgba(255,215,0,0.3);
            transform: translateY(-1px);
        }

        .pf-row {
            display: flex;
            gap: 12px;
            align-items: center;
        }

        .pf-expiry {
            display: flex;
            gap: 10px;
        }

        .pf-divider {
            height: 1px;
            background: rgba(255,215,0,0.04);
            margin: 10px 0 14px;
            border-radius: 2px;
        }

        /* preset buttons  */
        .pf-btn-inline {
            background: linear-gradient(90deg, rgba(255,215,0,0.12), rgba(255,215,0,0.06));
            color: #FFD700;
            border: 1px solid rgba(255,215,0,0.12);
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 64px;
            text-align: center;
        }

        .pf-btn-inline:hover {
            filter: brightness(1.05);
            transform: translateY(-1px);
        }

        .pf-footer {
            margin-top: 14px;
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .pay-button {
            background: linear-gradient(135deg, #FFD700, #FFAA00);
            color: #000;
            border: none;
            padding: 12px;
            border-radius: 999px;
            font-weight: 900;
            font-size: 16px;
            cursor: pointer;
            width: 100%;
            box-shadow: 0 10px 30px rgba(255,170,0,0.12);
            transition: transform .06s ease, box-shadow .12s ease;
        }

        .pay-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 14px 40px rgba(255,170,0,0.18);
        }

        .pay-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .change-method {
            text-align: center;
            color: #FFD700;
            font-size: 13px;
            cursor: pointer;
            margin-top: 6px;
            font-weight: 700;
        }

        /* modal  */
        .pf-modal-backdrop {
            position: fixed;
            inset: 0;
            background: rgba(0,0,0,0.6);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 9999;
        }

        .pf-modal {
            background: linear-gradient(180deg, rgba(8,8,8,0.98), rgba(10,10,10,0.98));
            color: #fff;
            border-radius: 12px;
            width: 420px;
            max-width: 94%;
            padding: 18px;
            box-shadow: 0 14px 60px rgba(0,0,0,0.6);
            border: 1px solid rgba(255,215,0,0.08);
        }

        .modal-row {
            margin-bottom: 12px;
            color: #eaeaea;
        }

        .modal-row strong {
            color: #ffd;
        }

        .modal-actions {
            display: flex;
            gap: 8px;
            justify-content: flex-end;
            margin-top: 8px;
        }

        .btn-muted {
            background: rgba(255,255,255,0.03);
            border: 1px solid rgba(255,255,255,0.04);
            padding: 8px 12px;
            border-radius: 8px;
            color: #fff;
            cursor: pointer;
        }

        .btn-muted:hover {
            transform: translateY(-1px);
        }

        .modal-confirm {
            background: linear-gradient(135deg,#FFD700,#FFAA00);
            color: #000;
            border: none;
            padding: 10px 14px;
            border-radius: 8px;
            font-weight: 800;
            cursor: pointer;
        }

        .modal-confirm:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        /* ---- Custom select styling  ---- */
        .pf-select {
           
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-color: rgba(255,255,255,0.03);
            background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24'><path fill='%23FFD700' d='M7 10l5 5 5-5z'/></svg>");
            background-repeat: no-repeat;
            background-position: right 12px center;
            background-size: 14px;
            padding-right: 40px;
        }

        .pf-select option {
            background: #0b0b0b;
            color: #fff;
        }

        
        .pf-invalid {
            border-color: #ff4d4f !important;
            box-shadow: 0 6px 28px rgba(255, 77, 79, 0.08) !important;
        }

        .pf-error-text {
            color: #ffb3b3;
            font-size: 12px;
            margin-top: 6px;
            margin-left: 2px;
        }
    </style>
}

<section class="donate-section" aria-labelledby="donate-heading">
    <div class="donate-card" id="donate-card">
        <!-- LEFT: Story / Mission & Payment -->
        <div class="donate-content">
            <h2 id="donate-heading">Your gift changes lives</h2>

            @* TempData messages (errors / confirmations) *@
            @if (TempData["PayfastError"] != null)
            {
                <div style="background:#7a1b1b;padding:10px;border-radius:6px;margin-bottom:12px;color:#fff;">
                    @TempData["PayfastError"]
                </div>
            }
            @if (TempData["PayfastMessage"] != null)
            {
                <div style="background:#1b5a1b;padding:10px;border-radius:6px;margin-bottom:12px;color:#fff;">
                    @TempData["PayfastMessage"]
                </div>
            }

            <p>Alabaster Box Anointing Ministries depends on the faithful support of friends and family to run community feeding schemes, outreach programs, worship gatherings, and practical assistance for those in need. Every gift large or small helps share hope and practical care.</p>

            <div class="donate-note" style="margin-top:1rem;">
                <p class="small-muted">Please use the payment portal for any direct donations</p>
            </div>

            <div class="donate-note" style="margin-top:1rem;">
                <p class="small-muted">Need a receipt or have questions about giving? Please visit our <a href="/Contact" style="color:#FFD700; font-weight:700;">Contact</a> page so our team can assist you.</p>
            </div>
            <div style="height:18px;"></div>

            <!-- ====== PAYMENT PANEL  ====== -->
            <div class="pf-panel" aria-label="Payment panel (UI only)">
                
                <div class="pf-field">
                    <label class="pf-label" for="cardNameUI">Name on Card</label>
                    <input id="cardNameUI" type="text" class="pf-input" placeholder="Name on card" autocomplete="cc-name" required />
                </div>

                <div class="pf-field">
                    <label class="pf-label" for="cardNumberUI">Card Number</label>
                    <input id="cardNumberUI" type="text" inputmode="numeric" maxlength="19" class="pf-input" placeholder="1234 5678 9012 3456" autocomplete="cc-number" required />
                </div>

                <div class="pf-row">
                    <div style="flex:1;">
                        <label class="pf-label">Expiry Date</label>
                        <div class="pf-expiry">
                            <select id="expMonthUI" class="pf-select" required>
                                <option value="">Month</option>
                                @for (int m = 1; m <= 12; m++)
                                {
                                    <option value="@m">@m.ToString("00")</option>
                                }
                            </select>

                            <select id="expYearUI" class="pf-select" required>
                                <option value="">Year</option>
                                @{
                                    var year = DateTime.Now.Year;
                                    for (var y = 0; y < 12; y++)
                                    {
                                        <option value="@(year + y)">@((year + y).ToString())</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>

                    <div style="width:140px;">
                        <label class="pf-label" for="cvvUI">CVV</label>
                        <input id="cvvUI" type="password" inputmode="numeric" maxlength="4" class="pf-input" placeholder="CVV" autocomplete="cc-csc" required />
                    </div>
                </div>

                <div class="pf-field">
                    <label class="pf-label" for="cardTypeUI">Straight/Budget</label>
                    <select id="cardTypeUI" class="pf-select" required>
                        <option value="">Select</option>
                        <option value="straight">Straight</option>
                        <option value="budget">Budget</option>
                    </select>
                    <div class="pf-help small-muted">South African issued cards only</div>
                </div>

                <div class="pf-divider" role="separator"></div>

                <div class="pf-field">
                    <label class="pf-label" for="pf_amount_ui">Amount (ZAR)</label>
                    <div style="display:flex; gap:8px; align-items:center;">
                        <div style="display:flex; gap:6px;">
                            <button type="button" class="preset-amt pf-btn-inline" data-amt="50">R50</button>
                            <button type="button" class="preset-amt pf-btn-inline" data-amt="100">R100</button>
                            <button type="button" class="preset-amt pf-btn-inline" data-amt="250">R250</button>
                        </div>

                   
                        <input id="pf_amount_ui" type="number" step="0.50" min="1" value="100.00" class="pf-input" style="max-width:150px;" required />
                    </div>
                </div>

                <div class="pf-footer">
                    <button type="button" id="pf_pay_open" class="pay-button">Pay R 100.00</button>
                </div>
            </div>
            <!-- ====== END payment panel ====== -->

            <div class="donation-footer" style="margin-top:1rem;">
                <p class="small-muted">Thank you for partnering with us — we pray God multiplies every seed sown into abundant fruit.</p>
            </div>
        </div>

        <!-- RIGHT: Donate Options -->
        <div class="donate-options" id="donate-options">
            <div class="option-card" aria-labelledby="monetary-title">
                <h3 id="monetary-title">Monetary Donations / Bank Transfer</h3>
                <p>If you would like to donate via eft in our own personal banking apps here are the donation details. After you transfer, please let us know via our Contact page so we can issue a receipt and say thank you.</p>

                <div class="bank-details" role="region" aria-label="Banking details">
                    <div class="bank-line"><span><strong>Bank:</strong> First National Bank</span></div>
                    <div class="bank-line">
                        <span><strong>Account Name:</strong> The Alabaster Box Anointing Ministries</span>
                        <button class="copy-btn" data-copy="The Alabaster Box Anointing Ministries" title="Copy account name">Copy</button>
                    </div>
                    <div class="bank-line">
                        <span><strong>Account Number:</strong> 62787787880</span>
                        <button class="copy-btn" data-copy="62787787880" title="Copy account number">Copy</button>
                    </div>
                    <div class="bank-line">
                        <span><strong>Branch Code:</strong> 250655</span>
                        <button class="copy-btn" data-copy="250655" title="Copy branch code">Copy</button>
                    </div>
                    <div class="bank-line"><span><strong>Account Type:</strong> Cheque account</span></div>
                </div>

                <p class="small-muted" style="margin-top:0.7rem;">Tip: Click <em>Copy</em> to quickly paste details into your internet banking or payments app.</p>
            </div>

            <div class="option-card" aria-labelledby="items-title">
                <h3 id="items-title">Donations of Physical Items</h3>
                <p>If you'd like to send clothing, food, supplies, or other physical items, please post, courier or drop then off them to the address below. Pack items securely and include a note with your contact details so we can acknowledge receipt, alos please contact us before you want to drop items off.</p>

                <div class="address-block" role="region" aria-label="Postal address">
                    <div class="address-lines">
                        2 GARDEN CRESCENT<br />
                        NEW GERMANY<br />
                        PINETOWN<br />
                        KWA-ZULU NATAL<br />
                        3601
                    </div>
                </div>

                <a class="btn-secondary" href="https://www.google.com/maps/search/2+Garden+Crescent+Pinetown+3601" target="_blank" rel="noopener noreferrer">Open in Maps</a>
            </div>
        </div>
    </div>
</section>

<!--  posts to StartPayfast. -->
<form id="pf_hidden_form" asp-controller="Donate" asp-action="StartPayfast" method="post" style="display:none;">
    @Html.AntiForgeryToken()
    <input type="hidden" name="amount" id="pf_amount_hidden" value="100.00" />
    <input type="hidden" name="donorName" id="pf_name_hidden" value="" />
    <input type="hidden" name="reference" id="pf_reference_hidden" value="" />
</form>

<!-- CONFIRMATION MODAL -->
<div class="pf-modal-backdrop" id="pf_modal" aria-hidden="true">
    <div class="pf-modal" role="dialog" aria-modal="true" aria-labelledby="pf_modal_title">
        <h3 id="pf_modal_title" style="margin-bottom:12px;color:#ffd;">Confirm Donation</h3>

        <div class="modal-row">
            <strong>Amount:</strong> <span id="modal_amount_text">R 100.00</span>
        </div>

        <div class="modal-row">
            <strong>Name:</strong> <span id="modal_name_text">—</span>
        </div>


        <div class="modal-row">
            <label for="modal_reference" style="display:block;margin-bottom:6px;color:#ffd;">Reference (optional)</label>
            <input id="modal_reference" class="pf-input" placeholder="Reference" />
        </div>

        <div class="modal-actions">
            <button type="button" class="btn-muted" id="modal_cancel">Cancel</button>
            <button type="button" id="modal_confirm" class="modal-confirm">Confirm &amp; Continue</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
       
        // reveal donate card (animation)
        const donateObserver = new IntersectionObserver(entries => {
            entries.forEach(entry => {
                if (entry.isIntersecting) entry.target.classList.add('visible');
            });
        }, { threshold: 0.15 });
        document.querySelectorAll('#donate-card').forEach(el => donateObserver.observe(el));

        // Copy to clipboard for bank details
        function handleCopy(text, btn) {
            if (!navigator.clipboard) {
                const ta = document.createElement('textarea');
                ta.value = text; document.body.appendChild(ta); ta.select();
                try { document.execCommand('copy'); } catch (e) { console.error('Copy failed', e); }
                ta.remove(); showCopyFeedback(btn); return;
            }
            navigator.clipboard.writeText(text).then(() => showCopyFeedback(btn)).catch(err => console.error('Could not copy text: ', err));
        }
        function showCopyFeedback(btn) {
            const original = btn.textContent; btn.textContent = 'Copied!'; btn.disabled = true;
            setTimeout(() => { btn.textContent = original; btn.disabled = false; }, 1800);
        }
        document.querySelectorAll('.copy-btn').forEach(btn => btn.addEventListener('click', (e) => handleCopy(btn.getAttribute('data-copy'), btn)));

        // UI controls
        const pfAmountUI = document.getElementById('pf_amount_ui');
        const pfPayOpen = document.getElementById('pf_pay_open');
        const presetBtns = document.querySelectorAll('.preset-amt');

        function formatCurrency(value){
            const n = Number(value) || 0;
            return n.toLocaleString('en-ZA',{ style:'currency', currency:'ZAR', minimumFractionDigits:2 });
        }

        function updatePayOpenText(){
            if (!pfAmountUI || !pfPayOpen) return;
            pfPayOpen.textContent = 'Pay ' + formatCurrency(pfAmountUI.value || '0');
        }

        presetBtns.forEach(b => b.addEventListener('click', () => {
            pfAmountUI.value = parseFloat(b.getAttribute('data-amt')).toFixed(2);
            updatePayOpenText();
            presetBtns.forEach(x => x.style.opacity = '0.6');
            b.style.opacity = '1';
        }));

        if (pfAmountUI) pfAmountUI.addEventListener('input', updatePayOpenText);
        updatePayOpenText();

        // modal elements
        const modal = document.getElementById('pf_modal');
        const modalAmountText = document.getElementById('modal_amount_text');
        const modalNameText = document.getElementById('modal_name_text');
      
        const modalRefInput = document.getElementById('modal_reference');

        function openModal(){
            modalAmountText.textContent = formatCurrency(pfAmountUI.value || '0');
            const nameVal = document.getElementById('cardNameUI').value.trim() || '—';
         
            modalNameText.textContent = nameVal;
            
            modalRefInput.value = '';
            modal.style.display = 'flex';
            modal.setAttribute('aria-hidden', 'false');
        }

        function closeModal(){ modal.style.display = 'none'; modal.setAttribute('aria-hidden', 'true'); }

        // Validation helpers
        function addError(el, msg) {
            if (!el) return;
            el.classList.add('pf-invalid');
            el.setAttribute('aria-invalid', 'true');
          
            let next = el.nextElementSibling;
            if (!next || !next.classList || !next.classList.contains('pf-error-text')) {
                const err = document.createElement('div');
                err.className = 'pf-error-text';
                err.textContent = msg || 'Required';
                el.parentNode.insertBefore(err, el.nextSibling);
            } else {
                next.textContent = msg || 'Required';
            }
        }

        function removeError(el) {
            if (!el) return;
            el.classList.remove('pf-invalid');
            el.removeAttribute('aria-invalid');
            let next = el.nextElementSibling;
            if (next && next.classList && next.classList.contains('pf-error-text')) {
                next.remove();
            }
        }

        function validateCardNumber(value) {
            const digits = (value || '').replace(/\D/g, '');
            return digits.length >= 13 && digits.length <= 19;
        }

        function validateCVV(value) {
            const digits = (value || '').replace(/\D/g, '');
            return digits.length === 3 || digits.length === 4;
        }

        function validateExpiry(month, year) {
            if (!month || !year) return false;
            const m = parseInt(month, 10);
            const y = parseInt(year, 10);
            if (isNaN(m) || isNaN(y)) return false;
           
            const expiry = new Date(y, m, 0, 23, 59, 59); 
            const now = new Date();
           
            return expiry >= new Date(now.getFullYear(), now.getMonth(), now.getDate());
        }

        function validateAllFields() {
          
            let isValid = true;

            const cardName = document.getElementById('cardNameUI');
            const cardNumber = document.getElementById('cardNumberUI');
            const expMonth = document.getElementById('expMonthUI');
            const expYear = document.getElementById('expYearUI');
            const cvv = document.getElementById('cvvUI');
            const cardType = document.getElementById('cardTypeUI');
            const amount = document.getElementById('pf_amount_ui');

            // Name
            if (!cardName || !cardName.value.trim()) {
                addError(cardName, 'Enter the name on the card');
                isValid = false;
            } else {
                removeError(cardName);
            }

            // Card number
            if (!cardNumber || !validateCardNumber(cardNumber.value)) {
                addError(cardNumber, 'Enter a valid card number');
                isValid = false;
            } else {
                removeError(cardNumber);
            }

            // Expiry
            if (!validateExpiry(expMonth.value, expYear.value)) {
                addError(expMonth, 'Invalid expiry');
                addError(expYear, 'Invalid expiry');
                isValid = false;
            } else {
                removeError(expMonth);
                removeError(expYear);
            }

            // CVV
            if (!cvv || !validateCVV(cvv.value)) {
                addError(cvv, 'Enter a valid CVV (3 or 4 digits)');
                isValid = false;
            } else {
                removeError(cvv);
            }

            // Card type
            if (!cardType || !cardType.value) {
                addError(cardType, 'Select payment type');
                isValid = false;
            } else {
                removeError(cardType);
            }

            // Amount
            const amtVal = parseFloat((amount && amount.value) || '0');
            if (!amount || isNaN(amtVal) || amtVal < 1) {
                addError(amount, 'Enter an amount (min R1.00)');
                isValid = false;
            } else {
                removeError(amount);
            }

            return isValid;
        }

        
        ['input','change'].forEach(evt => {
            ['cardNameUI','cardNumberUI','expMonthUI','expYearUI','cvvUI','cardTypeUI','pf_amount_ui'].forEach(id => {
                const el = document.getElementById(id);
                if (!el) return;
                el.addEventListener(evt, () => {
                    removeError(el);
                   
                    if (id === 'cardNumberUI') {
                        let v = el.value.replace(/\D/g,'').slice(0,19);
                        v = v.replace(/(.{4})/g,'$1 ').trim();
                        el.value = v;
                    }
                });
            });
        });

       
        if (pfPayOpen) {
            pfPayOpen.addEventListener('click', (e) => {
               
                e.preventDefault();
                const ok = validateAllFields();
                if (!ok) {
                   
                    const firstInvalid = document.querySelector('.pf-invalid');
                    if (firstInvalid) firstInvalid.focus();
                
                    pfPayOpen.animate([{ transform: 'translateY(0)' }, { transform: 'translateY(-4px)' }, { transform: 'translateY(0)' }], { duration: 260 });
                    return;
                }
                openModal();
            });
        }

        document.getElementById('modal_cancel').addEventListener('click', closeModal);

      
        document.getElementById('modal_confirm').addEventListener('click', () => {
            document.getElementById('pf_amount_hidden').value = parseFloat(pfAmountUI.value || '0').toFixed(2);
            document.getElementById('pf_name_hidden').value = document.getElementById('cardNameUI').value.trim();
                   document.getElementById('pf_reference_hidden').value = modalRefInput.value.trim();

            const confirmBtn = document.getElementById('modal_confirm');
            confirmBtn.disabled = true;
            confirmBtn.textContent = 'Redirecting…';

            document.getElementById('pf_hidden_form').submit();
        });

        
        const changeBtn = document.getElementById('pf_change');
        if (changeBtn) {
            changeBtn.addEventListener('click', () => {
                const bank = document.querySelector('.bank-details');
                if (bank) bank.scrollIntoView({ behavior:'smooth', block:'center' });
            });
        }

      
        const cardNumberUI = document.getElementById('cardNumberUI');
        if (cardNumberUI) {
            cardNumberUI.addEventListener('input', e => {
                let v = e.target.value.replace(/\D/g,'').slice(0,19);
                v = v.replace(/(.{4})/g,'$1 ').trim();
                e.target.value = v;
            });
        }
    </script>
}
